apiVersion: v1
kind: Template
message: |-
  The following service(s) have been created in your project: ${SERVICE_NAME}.

         Username: ${RABBITMQ_USER}
         Password: ${RABBITMQ_PASSWORD}
   Connection URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${SERVICE_NAME}
metadata:
  annotations:
    description: |-
      RabbitMQ v3.6 (with management plugin) message broker service, with persistent storage.
    iconClass: icon-rabbitmq
    tags: messaging,rabbitmq,rabbitmq-replicated
    openshift.io/display-name: RabbitMQ - replicated
    template.openshift.io/long-description: This template provides a replicated RabbitMQ server.
      The data is stored on persistent storage. The username, and password are chosen via parameters
      when provisioning this service.

      For more information about the parameters for configuring the High Availability options, see https://www.rabbitmq.com/ha.html.
    template.openshift.io/provider-display-name: AbarCloud
  name: rabbitmq-replicated
objects:

- apiVersion: v1
  kind: Secret
  metadata:
    name: ${SERVICE_NAME}
  stringData:
    rabbitmq-erlang-cookie: ${RABBITMQ_ERLANG_COOKIE}
    rabbitmq-user: ${RABBITMQ_USER}
    rabbitmq-password: ${RABBITMQ_PASSWORD}

- apiVersion: v1
  kind: Secret
  metadata:
    name: ${SERVICE_NAME}-certs
  stringData:
    cert.pem: ${RABBITMQ_SSL_CERT}
    key.pem: ${RABBITMQ_SSL_KEY}
    cacert.pem: ${RABBITMQ_SSL_CACERT}

- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME}
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  spec:
    ports:
    - name: 4369-tcp
      port: 4369
      protocol: TCP
      targetPort: 4369
    - name: 5671-tcp
      port: 5671
      protocol: TCP
      targetPort: 5671
    - name: 5672-tcp
      port: 5672
      protocol: TCP
      targetPort: 5672
    - name: 15671-tcp
      port: 15671
      protocol: TCP
      targetPort: 15671
    - name: 15672-tcp
      port: 15672
      protocol: TCP
      targetPort: 15672
    - name: 25672-tcp
      port: 25672
      protocol: TCP
      targetPort: 25672
    selector:
      name: ${SERVICE_NAME}
    clusterIP: None

- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: ${SERVICE_NAME}
    labels:
      name: ${SERVICE_NAME}
  spec:
    serviceName: "${SERVICE_NAME}"
    replicas: ${RABBITMQ_NODE_COUNT}
    template:
      metadata:
        labels:
          name: ${SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: RABBITMQ_SERVICE_DOMAIN
            value: ${SERVICE_NAME}
          - name: RABBITMQ_HA_SELECTOR
            value: ${RABBITMQ_HA_SELECTOR}
          - name: RABBITMQ_HA_MODE
            value: ${RABBITMQ_HA_MODE}
          - name: RABBITMQ_HA_PARAMS
            value: ${RABBITMQ_HA_PARAMS}
          - name: RABBITMQ_HA_SYNC_MODE
            value: ${RABBITMQ_HA_SYNC_MODE}
          - name: RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT
            value: ${RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT}
          - name: RABBITMQ_SSL_VERIFY
            value: ${RABBITMQ_SSL_VERIFY}
          - name: RABBITMQ_VM_MEMORY_HIGH_WATERMARK
            value: ${RABBITMQ_VM_MEMORY_HIGH_WATERMARK}
          - name: RABBITMQ_ERLANG_COOKIE
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}
                key: rabbitmq-erlang-cookie
          - name: RABBITMQ_DEFAULT_USER
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}
                key: rabbitmq-user
          - name: RABBITMQ_DEFAULT_PASS
            valueFrom:
              secretKeyRef:
                name: ${SERVICE_NAME}
                key: rabbitmq-password
          image: "172.30.150.55:5000/<NAMESPACE_HERE>/rabbitmq:3.6-management"
          imagePullPolicy: Always
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/sh
                - -c
                - /usr/local/bin/setup-cluster.sh
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 4369
            timeoutSeconds: 1
          name: ${SERVICE_NAME}
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 3
            exec:
              command:
              - /bin/sh
              - -c
              - rabbitmqctl cluster_status | grep $RABBITMQ_SERVICE_DOMAIN-0
          ports:
          - containerPort: 4369
            protocol: TCP
          - containerPort: 5671
            protocol: TCP
          - containerPort: 5672
            protocol: TCP
          - containerPort: 15671
            protocol: TCP
          - containerPort: 15672
            protocol: TCP
          - containerPort: 25672
            protocol: TCP
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          volumeMounts:
          - mountPath: /var/lib/rabbitmq/mnesia
            name: ${SERVICE_NAME}-data
          - mountPath: /certs
            name: ${SERVICE_NAME}-certs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${SERVICE_NAME}-certs
          secret:
            secretName: ${SERVICE_NAME}-certs
    volumeClaimTemplates:
    - metadata:
        name: ${SERVICE_NAME}-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${VOLUME_CAPACITY}

parameters:
- description: Maximum amount of memory each RabbitMQ container can use, e.g. 1000Mi, 2000Mi. This
    can be modified later in the StatefulSet. We recommend a minimum of 1000Mi.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 1000Mi
- description: "Maximum percentage of memory RabbitMQ can use. Read more: https://www.rabbitmq.com/production-checklist.html#resource-limits-ram"
  displayName: Memory High Watermark
  name: RABBITMQ_VM_MEMORY_HIGH_WATERMARK
  required: true
  value: "0.8"
- description: The name used when creating the required PetSet, BuildConfig, Service etc.
    Must be unique and contain only lower-case letters.
  displayName: Service Name
  name: SERVICE_NAME
  required: true
  value: rabbitmq
- description: Username for RabbitMQ user that will be created as the default user.
    Leave this empty if you'd like it to be auto-generated.
  displayName: RabbitMQ Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: RABBITMQ_USER
  required: true
- description: Password for the RabbitMQ connection user. Leave this empty if you'd like it to be auto-generated.
  displayName: RabbitMQ Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: RABBITMQ_PASSWORD
  required: true
- description: RabbitMQ Erlang Cookie used for clustering. Leave this empty if you'd like it to be auto-generated.
  displayName: RabbitMQ Erlang Cookie
  from: '[a-zA-Z0-9]{20}'
  generate: expression
  name: RABBITMQ_ERLANG_COOKIE
  required: true
- description: Number of replicated RabbitMQ nodes to create.
  displayName: RabbitMQ Node Count
  name: RABBITMQ_NODE_COUNT
  required: true
  value: "3"
- description: Volume space available for each RabbitMQ node, e.g. 2Gi, 5Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: |-
    Selector for specifying which queues should have the High-Availability
    policy set. By default this is set to select all queues.
  displayName: RabbitMQ High Availability Queue Selector.
  name: RABBITMQ_HA_SELECTOR
  required: false
  value: "."
- description: |-
    The RabbitMQ High-Availability mode that should be set. This can be 'all',
    'exactly' or 'none'.
  displayName: RabbitMQ High Availability Mode
  name: RABBITMQ_HA_MODE
  required: false
  value: "exactly"
- description: |-
    The RabbitMQ High-Availability parameters that should be set. This can
    either be a count of nodes or a list of nodes to replicate to.
  displayName: RabbitMQ High Availability Parameters
  name: RABBITMQ_HA_PARAMS
  required: false
  value: "3"
- description: |-
    The RabbitMQ High-Availability sync mode to use. This can be 'automatic'
    or 'manual'.
  displayName: RabbitMQ High Availability Sync Mode
  name: RABBITMQ_HA_SYNC_MODE
  required: false
  value: "automatic"
- description: |-
    The RabbitMQ SSL certificate file contents with new lines included. You can
    ensure this is inputted correctly by clicking on the arrows to expand the
    below text area and ensuring you enter a new line at the end of the
    content. Leave this blank if you do not want to enable SSL on the server.
  displayName: RabbitMQ SSL Certificate
  name: RABBITMQ_SSL_CERT
- description: |-
    The RabbitMQ SSL key file contents with new lines included. You can
    ensure this is inputted correctly by clicking on the arrows to expand the
    below text area and ensuring you enter a new line at the end of the
    content. Leave this blank if you do not want to enable SSL on the server.
  displayName: RabbitMQ SSL Key
  name: RABBITMQ_SSL_KEY
- description: |-
    The RabbitMQ SSL CA Cert file contents with new lines included. You can
    ensure this is inputted correctly by clicking on the arrows to expand the
    below text area and ensuring you enter a new line at the end of the
    content. Leave this blank if you do not want to enable SSL on the server.
  displayName: RabbitMQ SSL CA Cert
  name: RABBITMQ_SSL_CACERT
- description: |-
    Whether a RabbitMQ connection should fail if the client does not present a
    certificate.
  displayName: RabbitMQ SSL Fail If No Peer Cert
  name: RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT
  value: "false"
- description: |-
    If this is set to `verify_peer` then if the client sends a certificate the
    server will verify it is trusted. If this is set to `verify_none` then the
    server ignores any certificate sent by the client.
  displayName: RabbitMQ SSL Verify
  name: RABBITMQ_SSL_VERIFY
  value: verify_peer
